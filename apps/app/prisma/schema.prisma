generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  binaryTargets   = ["native", "rhel-openssl-3.0.x", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x", "rhel-openssl-1.0.x"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DATABASE_URL")
  extensions = [pgcrypto]
}


// ===== attachments.prisma =====
model Attachment {
    id         String               @id @default(dbgenerated("generate_prefixed_cuid('att'::text)"))
    name       String
    url        String
    type       AttachmentType
    entityId   String
    entityType AttachmentEntityType

    // Dates
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relationships
    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    comment        Comment?     @relation(fields: [commentId], references: [id])
    commentId      String?

    @@index([entityId, entityType])
}

enum AttachmentEntityType {
    task
    vendor
    risk
    comment
}

enum AttachmentType {
    image
    video
    audio
    document
    other
}


// ===== auth.prisma =====
model User {
    id            String    @id @default(dbgenerated("generate_prefixed_cuid('usr'::text)"))
    name          String
    email         String
    emailVerified Boolean
    image         String?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    lastLogin     DateTime?

    accounts           Account[]
    auditLog           AuditLog[]
    integrationResults IntegrationResult[]
    invitations        Invitation[]
    members            Member[]
    sessions           Session[]

    @@unique([email])
}

model EmployeeTrainingVideoCompletion {
    id          String    @id @default(dbgenerated("generate_prefixed_cuid('evc'::text)"))
    completedAt DateTime?
    videoId     String

    memberId String
    member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

    @@unique([memberId, videoId])
    @@index([memberId])
}

model Session {
    id                   String   @id @default(dbgenerated("generate_prefixed_cuid('ses'::text)"))
    expiresAt            DateTime
    token                String
    createdAt            DateTime @default(now())
    updatedAt            DateTime @updatedAt
    ipAddress            String?
    userAgent            String?
    userId               String
    activeOrganizationId String?
    user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([token])
}

model Account {
    id                    String    @id @default(dbgenerated("generate_prefixed_cuid('acc'::text)"))
    accountId             String
    providerId            String
    userId                String
    user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    accessToken           String?
    refreshToken          String?
    idToken               String?
    accessTokenExpiresAt  DateTime?
    refreshTokenExpiresAt DateTime?
    scope                 String?
    password              String?
    createdAt             DateTime
    updatedAt             DateTime
}

model Verification {
    id         String   @id @default(dbgenerated("generate_prefixed_cuid('ver'::text)"))
    identifier String
    value      String
    expiresAt  DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

model Member {
    id             String       @id @default(dbgenerated("generate_prefixed_cuid('mem'::text)"))
    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    userId         String
    user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    role           String // Purposefully a string, since BetterAuth doesn't support enums this way
    createdAt      DateTime     @default(now())

    department                      Departments                       @default(none)
    isActive                        Boolean                           @default(true)
    employeeTrainingVideoCompletion EmployeeTrainingVideoCompletion[]
    fleetDmLabelId                  Int?

    assignedPolicies Policy[]   @relation("PolicyAssignee") // Policies where this member is an assignee
    approvedPolicies Policy[]   @relation("PolicyApprover") // Policies where this member is an approver
    risks            Risk[]
    tasks            Task[]
    vendors          Vendor[]
    comments         Comment[]
    auditLogs        AuditLog[]
}

model Invitation {
    id             String       @id @default(dbgenerated("generate_prefixed_cuid('inv'::text)"))
    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    email          String
    role           String // Purposefully a string, since BetterAuth doesn't support enums this way
    status         String
    expiresAt      DateTime
    inviterId      String
    user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)
}

// This is only for the app to consume, shouldn't be enforced by DB
// Otherwise it won't work with Better Auth, as per https://www.better-auth.com/docs/plugins/organization#access-control
enum Role {
    owner
    admin
    auditor
    employee
}

enum PolicyStatus {
    draft
    published
    needs_review
}


// ===== comment.prisma =====
model Comment {
  id         String            @id @default(dbgenerated("generate_prefixed_cuid('cmt'::text)"))
  content    String
  entityId   String
  entityType CommentEntityType

  // Dates
  createdAt DateTime @default(now())

  // Relationships
  authorId       String
  author         Member       @relation(fields: [authorId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Relation to Attachments
  attachments Attachment[]

  @@index([entityId])
}

enum CommentEntityType {
  task
  vendor
  risk
  policy
}


// ===== context.prisma =====
model Context {
    id             String       @id @default(dbgenerated("generate_prefixed_cuid('ctx'::text)"))
    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

    question String
    answer   String

    tags String[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([organizationId])
    @@index([question])
    @@index([answer])
    @@index([tags])
}


// ===== control.prisma =====
model Control {
  // Metadata
  id          String @id @default(dbgenerated("generate_prefixed_cuid('ctl'::text)"))
  name        String
  description String

  // Review dates
  lastReviewDate DateTime?
  nextReviewDate DateTime?

  // Relationships
  organization       Organization                    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId     String
  requirementsMapped RequirementMap[]
  tasks              Task[]
  policies           Policy[]
  controlTemplateId  String?
  controlTemplate    FrameworkEditorControlTemplate? @relation(fields: [controlTemplateId], references: [id])

  @@index([organizationId])
}


// ===== framework-editor.prisma =====
// --- Data for Framework Editor ---
model FrameworkEditorVideo {
    id          String @id @default(dbgenerated("generate_prefixed_cuid('frk_vi'::text)"))
    title       String
    description String
    youtubeId   String
    url         String

    // Dates
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model FrameworkEditorFramework {
    id          String  @id @default(dbgenerated("generate_prefixed_cuid('frk'::text)"))
    name        String // e.g., "soc2", "iso27001"
    version     String
    description String
    visible     Boolean @default(false)

    requirements       FrameworkEditorRequirement[]
    frameworkInstances FrameworkInstance[]

    // Dates
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model FrameworkEditorRequirement {
    id          String                   @id @default(dbgenerated("generate_prefixed_cuid('frk_rq'::text)"))
    frameworkId String
    framework   FrameworkEditorFramework @relation(fields: [frameworkId], references: [id])

    name        String // Original requirement ID within that framework, e.g., "Privacy"
    identifier  String @default("") // Unique identifier for the requirement, e.g., "cc1-1"
    description String

    controlTemplates FrameworkEditorControlTemplate[]
    requirementMaps  RequirementMap[]

    // Dates
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model FrameworkEditorPolicyTemplate {
    id          String      @id @default(dbgenerated("generate_prefixed_cuid('frk_pt'::text)"))
    name        String
    description String
    frequency   Frequency // Using the enum from shared.prisma
    department  Departments // Using the enum from shared.prisma
    content     Json

    controlTemplates FrameworkEditorControlTemplate[]

    // Dates
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    // Instances
    policies Policy[]
}

model FrameworkEditorTaskTemplate {
    id          String      @id @default(dbgenerated("generate_prefixed_cuid('frk_tt'::text)"))
    name        String
    description String
    frequency   Frequency // Using the enum from shared.prisma
    department  Departments // Using the enum from shared.prisma

    controlTemplates FrameworkEditorControlTemplate[]

    // Dates
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    // Instances
    tasks Task[]
}

model FrameworkEditorControlTemplate {
    id          String @id @default(dbgenerated("generate_prefixed_cuid('frk_ct'::text)"))
    name        String
    description String

    policyTemplates FrameworkEditorPolicyTemplate[]
    requirements    FrameworkEditorRequirement[]
    taskTemplates   FrameworkEditorTaskTemplate[]

    // Dates
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    // Instances
    controls Control[]
}


// ===== framework.prisma =====
model FrameworkInstance {
  // Metadata
  id             String @id @default(dbgenerated("generate_prefixed_cuid('frm'::text)"))
  organizationId String

  frameworkId String
  framework   FrameworkEditorFramework @relation(fields: [frameworkId], references: [id], onDelete: Cascade)

  // Relationships
  organization       Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  requirementsMapped RequirementMap[]

  @@unique([organizationId, frameworkId])
}


// ===== integration.prisma =====
model Integration {
  id             String              @id @default(dbgenerated("generate_prefixed_cuid('int'::text)"))
  name           String
  integrationId  String
  settings       Json
  userSettings   Json
  organizationId String
  lastRunAt      DateTime?
  organization   Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  results        IntegrationResult[]

  @@index([organizationId])
}

model IntegrationResult {
  id             String    @id @default(dbgenerated("generate_prefixed_cuid('itr'::text)"))
  title          String?
  description    String?
  remediation    String?
  status         String?
  severity       String?
  resultDetails  Json?
  completedAt    DateTime? @default(now())
  integrationId  String
  organizationId String
  assignedUserId String?

  assignedUser User?       @relation(fields: [assignedUserId], references: [id], onDelete: Cascade)
  integration  Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  @@index([integrationId])
}


// ===== onboarding.prisma =====
model Onboarding {
    organizationId        String       @id
    organization          Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    policies              Boolean      @default(false)
    employees             Boolean      @default(false)
    vendors               Boolean      @default(false)
    integrations          Boolean      @default(false)
    risk                  Boolean      @default(false)
    team                  Boolean      @default(false)
    tasks                 Boolean      @default(false)
    callBooked            Boolean      @default(false)
    companyBookingDetails Json?
    companyDetails        Json?
    triggerJobId          String?
    triggerJobCompleted   Boolean      @default(false)

    @@index([organizationId])
}


// ===== organization.prisma =====
model Organization {
  id                  String      @id @default(dbgenerated("generate_prefixed_cuid('org'::text)"))
  name                String
  slug                String      @unique @default(dbgenerated("generate_prefixed_cuid('slug'::text)"))
  logo                String?
  createdAt           DateTime    @default(now())
  metadata            String?
  onboarding          Onboarding?
  website             String?
  onboardingCompleted Boolean     @default(false)
  hasAccess           Boolean     @default(false)

  // FleetDM
  fleetDmLabelId        Int?
  isFleetSetupCompleted Boolean @default(false)

  apiKeys            ApiKey[]
  auditLog           AuditLog[]
  controls           Control[]
  frameworkInstances FrameworkInstance[]
  integrations       Integration[]
  invitations        Invitation[]
  members            Member[]
  policy             Policy[]
  risk               Risk[]
  vendors            Vendor[]
  tasks              Task[]
  comments           Comment[]
  attachments        Attachment[]
  trust              Trust[]
  context            Context[]

  @@index([slug])
}


// ===== policy.prisma =====
model Policy {
  id               String       @id @default(dbgenerated("generate_prefixed_cuid('pol'::text)"))
  name             String
  description      String?
  status           PolicyStatus @default(draft)
  content          Json[]
  frequency        Frequency?
  department       Departments?
  isRequiredToSign Boolean      @default(false)
  signedBy         String[]     @default([])
  reviewDate       DateTime?
  isArchived       Boolean      @default(false)

  // Dates
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  lastArchivedAt  DateTime?
  lastPublishedAt DateTime?

  // Relationships
  organizationId   String
  organization     Organization                   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  assigneeId       String?
  assignee         Member?                        @relation("PolicyAssignee", fields: [assigneeId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  approverId       String?
  approver         Member?                        @relation("PolicyApprover", fields: [approverId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  policyTemplateId String?
  policyTemplate   FrameworkEditorPolicyTemplate? @relation(fields: [policyTemplateId], references: [id])
  controls         Control[]

  @@index([organizationId])
}


// ===== requirement.prisma =====
model RequirementMap {
    id String @id @default(dbgenerated("generate_prefixed_cuid('req'::text)"))

    requirementId String
    requirement   FrameworkEditorRequirement @relation(fields: [requirementId], references: [id], onDelete: Cascade)

    controlId String
    control   Control @relation(fields: [controlId], references: [id], onDelete: Cascade)

    frameworkInstanceId String
    frameworkInstance   FrameworkInstance @relation(fields: [frameworkInstanceId], references: [id], onDelete: Cascade)

    @@unique([controlId, frameworkInstanceId, requirementId])
    @@index([requirementId, frameworkInstanceId])
}


// ===== risk.prisma =====
model Risk {
  // Metadata
  id                           String            @id @default(dbgenerated("generate_prefixed_cuid('rsk'::text)"))
  title                        String
  description                  String
  category                     RiskCategory
  department                   Departments?
  status                       RiskStatus        @default(open)
  likelihood                   Likelihood        @default(very_unlikely)
  impact                       Impact            @default(insignificant)
  residualLikelihood           Likelihood        @default(very_unlikely)
  residualImpact               Impact            @default(insignificant)
  treatmentStrategyDescription String?
  treatmentStrategy            RiskTreatmentType @default(accept)

  // Dates
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  assigneeId     String?
  assignee       Member?      @relation(fields: [assigneeId], references: [id])
  tasks          Task[]

  @@index([organizationId])
  @@index([category])
  @@index([status])
}

enum RiskTreatmentType {
  accept
  avoid
  mitigate
  transfer
}

enum RiskCategory {
  customer
  governance
  operations
  other
  people
  regulatory
  reporting
  resilience
  technology
  vendor_management
}

enum RiskStatus {
  open
  pending
  closed
  archived
}


// ===== shared.prisma =====
model ApiKey {
    id         String    @id @default(dbgenerated("generate_prefixed_cuid('apk'::text)"))
    name       String
    key        String    @unique
    salt       String?
    createdAt  DateTime  @default(now())
    expiresAt  DateTime?
    lastUsedAt DateTime?
    isActive   Boolean   @default(true)

    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    organizationId String

    @@index([organizationId])
    @@index([key])
}

model AuditLog {
    id             String              @id @default(dbgenerated("generate_prefixed_cuid('aud'::text)"))
    timestamp      DateTime            @default(now())
    organizationId String
    userId         String
    memberId       String?
    data           Json
    description    String?
    entityId       String?
    entityType     AuditLogEntityType?

    organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    member       Member?      @relation(fields: [memberId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([organizationId])
    @@index([memberId])
    @@index([entityType])
}

enum AuditLogEntityType {
    organization
    framework
    requirement
    control
    policy
    task
    people
    risk
    vendor
    tests
    integration
}

model GlobalVendors {
    website                     String   @id @unique
    company_name                String?
    legal_name                  String?
    company_description         String?
    company_hq_address          String?
    privacy_policy_url          String?
    terms_of_service_url        String?
    service_level_agreement_url String?
    security_page_url           String?
    trust_page_url              String?
    security_certifications     String[]
    subprocessors               String[]
    type_of_company             String?

    approved  Boolean  @default(false)
    createdAt DateTime @default(now())

    @@index([website])
}

enum Departments {
    none
    admin
    gov
    hr
    it
    itsm
    qms
}

enum Frequency {
    monthly
    quarterly
    yearly
}

enum Likelihood {
    very_unlikely
    unlikely
    possible
    likely
    very_likely
}

enum Impact {
    insignificant
    minor
    moderate
    major
    severe
}


// ===== task.prisma =====
model Task {
    // Metadata
    id          String         @id @default(dbgenerated("generate_prefixed_cuid('tsk'::text)"))
    title       String
    description String
    status      TaskStatus     @default(todo)
    frequency   TaskFrequency?
    department  Departments?   @default(none)
    order       Int            @default(0)

    // Dates
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
    lastCompletedAt DateTime?

    // Relationships
    controls       Control[]
    vendors        Vendor[]
    risks          Risk[]
    assigneeId     String?
    assignee       Member?                      @relation(fields: [assigneeId], references: [id])
    organizationId String
    organization   Organization                 @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    taskTemplateId String?
    taskTemplate   FrameworkEditorTaskTemplate? @relation(fields: [taskTemplateId], references: [id])
}

enum TaskStatus {
    todo
    in_progress
    done
    not_relevant
}

enum TaskFrequency {
    daily
    weekly
    monthly
    quarterly
    yearly
}


// ===== trust.prisma =====
model Trust {
    organizationId     String
    organization       Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    friendlyUrl        String?      @unique
    domain             String?
    domainVerified     Boolean      @default(false)
    isVercelDomain     Boolean      @default(false)
    vercelVerification String?
    status             TrustStatus  @default(draft)
    contactEmail       String?

    email         String?
    privacyPolicy String?
    soc2          Boolean @default(false)
    iso27001      Boolean @default(false)
    gdpr          Boolean @default(false)

    soc2_status     FrameworkStatus @default(started)
    iso27001_status FrameworkStatus @default(started)
    gdpr_status     FrameworkStatus @default(started)

    @@id([status, organizationId])
    @@unique([organizationId])
    @@index([organizationId])
    @@index([friendlyUrl])
}

enum TrustStatus {
    draft
    published
}

enum FrameworkStatus {
    started
    in_progress
    compliant
}


// ===== vendor.prisma =====
model Vendor {
  id                  String         @id @default(dbgenerated("generate_prefixed_cuid('vnd'::text)"))
  name                String
  description         String
  category            VendorCategory @default(other)
  status              VendorStatus   @default(not_assessed)
  inherentProbability Likelihood     @default(very_unlikely)
  inherentImpact      Impact         @default(insignificant)
  residualProbability Likelihood     @default(very_unlikely)
  residualImpact      Impact         @default(insignificant)
  website             String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organizationId String
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  assigneeId     String?
  assignee       Member?         @relation(fields: [assigneeId], references: [id], onDelete: Cascade)
  contacts       VendorContact[]
  tasks          Task[]

  @@index([organizationId])
  @@index([assigneeId])
  @@index([category])
}

model VendorContact {
  id        String   @id @default(dbgenerated("generate_prefixed_cuid('vct'::text)"))
  vendorId  String
  name      String
  email     String
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Vendor    Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@index([vendorId])
}

enum VendorCategory {
  cloud
  infrastructure
  software_as_a_service
  finance
  marketing
  sales
  hr
  other
}

enum VendorStatus {
  not_assessed
  in_progress
  assessed
}
